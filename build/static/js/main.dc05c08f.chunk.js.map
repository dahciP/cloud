{"version":3,"sources":["Components/Home/Home.jsx","utils/setAuthToken.jsx","redux/actions/authActions.jsx","redux/actions/types.jsx","Components/Auth/Login.jsx","Components/Auth/Register.jsx","Components/Navbar/Navbar.jsx","Components/NotFound/NotFound.jsx","redux/reducers/authReducers.jsx","redux/reducers/errorReducers.jsx","redux/reducers/index.jsx","redux/store.jsx","Components/private-route/PrivateRoute.jsx","Components/Dashboard/Dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","id","className","to","src","alt","Component","setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decoded","type","payload","logoutUser","dispatch","localStorage","removeItem","Login","props","onChangeLogin","e","setState","target","value","loginSubmit","preventDefault","userData","email","state","password","loginUser","errors","this","auth","isAuthenticated","history","push","nextProps","noValidate","onSubmit","class","htmlFor","placeholder","onChange","error","classnames","invalid","emailNotFound","passwordIncorrect","connect","post","then","res","data","setItem","jwt_decode","catch","err","response","Register","onChangeRegister","registerSubmit","newUser","name","password2","registerUser","withRouter","Navbar","data-toggle","data-target","aria-controls","aria-expanded","aria-label","NotFound","isEmpty","require","initialState","user","loading","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","component","rest","render","Dashboard","onLogoutClick","split","onClick","App","jwtToken","currentTime","Date","now","exp","location","href","exact","path","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dc05c08f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Home.css';\nimport { FaNodeJs, FaReact, FaGithub } from 'react-icons/fa';\nimport { DiMongodb } from 'react-icons/di';\n\nclass Home extends Component {\n  render() {\n    return (\n      <section id=\"banner\" className=\"banner\">\n        <div className=\"container p-0\">\n          <div className=\"row\">\n            <div className=\"col-lg-6\">\n              <div className=\"banner-left\">\n                <h1 className=\"text-capitalize\">\n                  Welcome to\n                  <span className=\"text-uppercase\"> cloud </span>\n                  hosting Application\n                </h1>\n                <div className=\"buttons\">\n                  <Link\n                    to=\"/login\"\n                    className=\"btn btn-lg btn-outline-none border-3 btn-login\"\n                  >\n                    Login\n                  </Link>\n                  <Link\n                    to=\"/register\"\n                    className=\"btn btn-lg btn-outline-none border-3 btn-register\"\n                  >\n                    Signup\n                  </Link>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-lg-6\">\n              <div className=\"banner-right\">\n                <h1 className=\"text-capitalize\">\n                  <DiMongodb className=\"text-success\" />\n                  <img\n                    src=\"https://www.vectorlogo.zone/logos/expressjs/expressjs-icon.svg\"\n                    alt=\"e\"\n                  />\n                  <FaReact className=\"text-info\" />\n                  <FaNodeJs className=\"text-success\" />\n                </h1>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Home;\n","import axios from 'axios';\nconst setAuthToken = token => {\n  if (token) {\n    // Apply authorization token to every request if logged in\n    axios.defaults.headers.common['Authorization'] = token;\n  } else {\n    // Delete auth header\n    delete axios.defaults.headers.common['Authorization'];\n  }\n};\nexport default setAuthToken;\n","import axios from 'axios';\nimport setAuthToken from '../../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from './types'; // Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post('/api/users/register', userData)\n    .then(res => history.push('/login')) // re-direct to login on successful register\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n}; // Login - get user token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post('/api/users/login', userData)\n    .then(res => {\n      // Save to localStorage// Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem('jwtToken', token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n}; // Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem('jwtToken');\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};\n","export const GET_ERRORS = \"GET_ERRORS\";\nexport const USER_LOADING = \"USER_LOADING\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import React, { Component } from 'react';\nimport './Auth.css';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { loginUser } from '../../redux/actions/authActions';\nimport classnames from 'classnames';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: '',\n      password: '',\n      errors: {}\n    };\n  }\n  componentDidMount() {\n    // If logged in and user navigates to Login page, should redirect them to dashboard\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push('/dashboard');\n    }\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.auth.isAuthenticated) {\n      this.props.history.push('/dashboard'); // push user to dashboard when they login\n    }\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  onChangeLogin = e => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n  loginSubmit = e => {\n    e.preventDefault();\n    const userData = {\n      email: this.state.email,\n      password: this.state.password\n    };\n    this.props.loginUser(userData); // since we handle the redirect within our component, we don't need to pass in this.props.history as a parameter\n  };\n\n  render() {\n    const { email, password, errors } = this.state;\n    return (\n      <section className=\"login\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-lg-6\">\n              <div className=\"login-left\">\n                <h4 className=\"text-capitalize\">\n                  Login with your credentials to enjoy the Application services\n                </h4>\n              </div>\n            </div>\n            <div className=\"col-lg-6\">\n              <div className=\"login-right\">\n                <h1>Login</h1>\n                <form noValidate onSubmit={this.loginSubmit}>\n                  <div class=\"form-row\">\n                    <div class=\"form-group col-md-12\">\n                      <label htmlFor=\"Email\">Email</label> <br />\n                      <input\n                        type=\"email\"\n                        className=\"input-control\"\n                        placeholder=\"Enter your email\"\n                        id=\"email\"\n                        value={email}\n                        onChange={this.onChangeLogin}\n                        error={errors.email}\n                        className={classnames('', {\n                          invalid: errors.email || errors.emailNotFound\n                        })}\n                      />{' '}\n                      <br />\n                      <span className=\"text-danger\">\n                        {errors.email}\n                        {errors.emailNotFound}\n                      </span>\n                    </div>\n                  </div>\n                  <div class=\"form-row\">\n                    <div class=\"form-group col-md-12\">\n                      <label htmlFor=\"Password\">Password</label> <br />\n                      <input\n                        type=\"password\"\n                        className=\"input-control\"\n                        placeholder=\"Enter your password\"\n                        id=\"password\"\n                        value={password}\n                        onChange={this.onChangeLogin}\n                        error={errors.password}\n                        className={classnames('', {\n                          invalid: errors.password || errors.passwordIncorrect\n                        })}\n                      />{' '}\n                      <br />\n                      <span className=\"text-danger\">\n                        {errors.password}\n                        {errors.passwordIncorrect}\n                      </span>\n                    </div>\n                  </div>\n                  <div class=\"form-row\">\n                    <div class=\"form-group col-md-12\">\n                      <button type=\"submit\" className=\"btn btn-md btn-register\">\n                        Login\n                      </button>\n                    </div>\n                  </div>\n                  <div class=\"form-row\">\n                    <div class=\"form-group col-md-12\">\n                      <p>\n                        Don't have an account ?\n                        <Link to=\"/register\" className=\"text-success\">\n                          Create one\n                        </Link>\n                      </p>\n                    </div>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nLogin.propTypes = {\n  loginUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\nexport default connect(mapStateToProps, { loginUser })(Login);\n","import React, { Component } from 'react';\nimport './Auth.css';\nimport { Link, withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { registerUser } from '../../redux/actions/authActions';\nimport classnames from 'classnames';\n\nclass Register extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      email: '',\n      password: '',\n      password2: '',\n      errors: {}\n    };\n  }\n  componentDidMount() {\n    // If logged in and user navigates to Register page, should redirect them to dashboard\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push('/dashboard');\n    }\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  onChangeRegister = e => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n  registerSubmit = e => {\n    e.preventDefault();\n    const newUser = {\n      name: this.state.name,\n      email: this.state.email,\n      password: this.state.password,\n      password2: this.state.password2\n    };\n    this.props.registerUser(newUser, this.props.history);\n  };\n\n  render() {\n    const { errors, name, password, password2, email } = this.state;\n    return (\n      <section className=\"register\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-lg-6\">\n              <div className=\"signup-left\">\n                <h4 className=\"text-capitalize\">\n                  To Register With Our Application You should must Put Your Own\n                  mongoURI Id in the <kbd>config/default.json</kbd>\n                </h4>\n              </div>\n            </div>\n            <div className=\"col-lg-6\">\n              <div className=\"signup-right\">\n                <h1>Signup</h1>\n                <form noValidate onSubmit={this.registerSubmit}>\n                  <div class=\"form-row\">\n                    <div class=\"form-group col-md-12\">\n                      <label htmlFor=\"name\">Full Name</label> <br />\n                      <input\n                        type=\"text\"\n                        className=\"input-control\"\n                        placeholder=\"Enter your name\"\n                        id=\"name\"\n                        value={name}\n                        onChange={this.onChangeRegister}\n                        error={errors.name}\n                        className={classnames('', {\n                          invalid: errors.name\n                        })}\n                      />{' '}\n                      <br />\n                      <span className=\"text-danger\">{errors.name}</span>\n                    </div>\n                  </div>\n                  <div class=\"form-row\">\n                    <div class=\"form-group col-md-12\">\n                      <label htmlFor=\"Email\">Email</label> <br />\n                      <input\n                        type=\"email\"\n                        className=\"input-control\"\n                        placeholder=\"Enter your email\"\n                        id=\"email\"\n                        value={email}\n                        onChange={this.onChangeRegister}\n                        error={errors.email}\n                        className={classnames('', {\n                          invalid: errors.email\n                        })}\n                      />{' '}\n                      <br />\n                      <span className=\"text-danger\">{errors.email}</span>\n                    </div>\n                  </div>\n                  <div class=\"form-row\">\n                    <div class=\"form-group col-md-12\">\n                      <label htmlFor=\"Password\">Password</label> <br />\n                      <input\n                        type=\"password\"\n                        className=\"input-control\"\n                        placeholder=\"Enter your password\"\n                        id=\"password\"\n                        value={password}\n                        onChange={this.onChangeRegister}\n                        error={errors.password}\n                        className={classnames('', {\n                          invalid: errors.password\n                        })}\n                      />{' '}\n                      <br />\n                      <span className=\"text-danger\">{errors.password}</span>\n                    </div>\n                  </div>\n                  <div class=\"form-row\">\n                    <div class=\"form-group col-md-12\">\n                      <label htmlFor=\"Confirm Password\">Confirm Password</label>\n                      <br />\n                      <input\n                        type=\"password\"\n                        className=\"input-control\"\n                        placeholder=\"Confirm your password\"\n                        id=\"password2\"\n                        value={password2}\n                        onChange={this.onChangeRegister}\n                        error={errors.password2}\n                        className={classnames('', {\n                          invalid: errors.password2\n                        })}\n                      />{' '}\n                      <br />\n                      <span className=\"text-danger\">{errors.password2}</span>\n                    </div>\n                  </div>\n                  <div class=\"form-row\">\n                    <div class=\"form-group col-md-12\">\n                      <button type=\"submit\" className=\"btn btn-md btn-register\">\n                        Signup\n                      </button>\n                    </div>\n                  </div>\n                  <div class=\"form-row\">\n                    <div class=\"form-group col-md-12\">\n                      <p>\n                        Already have an account ?\n                        <Link to=\"/login\" className=\"text-success\">\n                          Login\n                        </Link>\n                      </p>\n                    </div>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\nRegister.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\nexport default connect(mapStateToProps, { registerUser })(withRouter(Register));\n","import React, { Component } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport './Navbar.css';\nimport { FaGithub } from 'react-icons/fa';\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav class=\"navbar navbar-expand-md navbar-dark fixed-top\">\n        <div className=\"container\">\n          <Link class=\"navbar-brand border-none\" to=\"/\">\n            MERN\n          </Link>\n          <button\n            class=\"navbar-toggler d-lg-none\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#collapsibleNavId\"\n            aria-controls=\"collapsibleNavId\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span class=\"navbar-toggler-icon\"></span>\n          </button>\n          <div class=\"collapse navbar-collapse\" id=\"collapsibleNavId\">\n            <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\n              {/* <li class=\"nav-item active\">\n                <Link class=\"nav-link\" to=\"#\">\n                  Home <span class=\"sr-only\">(current)</span>\n                </Link>\n              </li> */}\n              <li class=\"nav-item\">\n                <Link\n                  className=\"nav-link btn btn-login button-outline-none\"\n                  to=\"/login\"\n                >\n                  Login\n                </Link>\n              </li>\n              <li class=\"nav-item\">\n                <Link\n                  className=\"nav-link btn btn-register button-outline-none\"\n                  to=\"/register\"\n                >\n                  Signup\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport './NotFound.css'\nimport { Link } from 'react-router-dom';\n\nclass NotFound extends Component {\n    render() {\n        return (\n            <section className=\"notfound\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <div className=\"content\">\n                                <h1>404</h1>\n                                <h2>Not Found</h2>\n                                <div className=\"content-button\">\n                                    <Link to ='/' className=\"btn btn-lg btn-warning \">Home</Link>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        )\n    }\n}\n\nexport default NotFound\n","import { SET_CURRENT_USER, USER_LOADING } from '../actions/types';\nconst isEmpty = require('is-empty');\nconst initialState = {\n  isAuthenticated: false,\n  user: {},\n  loading: false\n};\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return {\n        ...state,\n        isAuthenticated: !isEmpty(action.payload),\n        user: action.payload\n      };\n    case USER_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    default:\n      return state;\n  }\n}\n","import { GET_ERRORS } from '../actions/types';\nconst initialState = {};\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_ERRORS:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport authReducer from './authReducers';\nimport errorReducer from './errorReducers';\nexport default combineReducers({\n  auth: authReducer,\n  errors: errorReducer\n});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/index';\nconst initialState = {};\nconst middleware = [thunk];\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    (window.__REDUX_DEVTOOLS_EXTENSION__ &&\n      window.__REDUX_DEVTOOLS_EXTENSION__()(\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\n          window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__()\n      )) ||\n      compose\n  )\n);\nexport default store;\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      auth.isAuthenticated === true ? (\n        <Component {...props} />\n      ) : (\n        <Redirect to=\"/login\" />\n      )\n    }\n  />\n);\n\nPrivateRoute.propTypes = {\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { logoutUser } from '../../redux/actions/authActions';\nimport './Dashboard.css';\n\nclass Dashboard extends Component {\n  onLogoutClick = e => {\n    e.preventDefault();\n    this.props.logoutUser();\n  };\n\n  render() {\n    const { user } = this.props.auth;\n    return (\n      <section className=\"dashboard\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <div className=\"content\">\n                <h1>\n                  H! <b>{user.name.split(' ')[0]} </b>\n                </h1>\n                <h3>\n                  You are Successfully logged into a cloud hosting application\n                </h3>\n                <button\n                  onClick={this.onLogoutClick}\n                  className=\"btn btn-lg btn-warning mt-5\"\n                >\n                  Logout\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nDashboard.propTypes = {\n  logoutUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, { logoutUser })(Dashboard);\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Home from './Components/Home/Home';\nimport Login from './Components/Auth/Login';\nimport Register from './Components/Auth/Register';\nimport Navbar from './Components/Navbar/Navbar';\nimport NotFound from './Components/NotFound/NotFound';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport jwt_decode from 'jwt-decode';\nimport setAuthToken from './utils/setAuthToken';\nimport { setCurrentUser, logoutUser } from './redux/actions/authActions';\nimport PrivateRoute from './Components/private-route/PrivateRoute';\nimport Dashboard from './Components/Dashboard/Dashboard';\n\nfunction App() {\n  // Check for token to keep user logged in\n  if (localStorage.jwtToken) {\n    // Set auth token header auth\n    const token = localStorage.jwtToken;\n    setAuthToken(token);\n    // Decode token and get user info and exp\n    const decoded = jwt_decode(token);\n    // Set user and isAuthenticated\n    store.dispatch(setCurrentUser(decoded)); // Check for expired token\n    const currentTime = Date.now() / 1000; // to get in milliseconds\n    if (decoded.exp < currentTime) {\n      // Logout user\n      store.dispatch(logoutUser()); // Redirect to login\n      window.location.href = './login';\n    }\n  }\n  return (\n    <Provider store={store}>\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/register\" component={Register} />\n          <Route path=\"/login\" component={Login} />\n          <Switch>\n            <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\n            <Route path=\"*\" component={NotFound} />\n          </Switch>\n          <Route path=\"*\" component={NotFound} />\n        </Switch>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}